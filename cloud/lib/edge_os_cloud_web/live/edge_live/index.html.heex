<h1>Edge List</h1>

<%= if @live_action in [:edit] do %>
  <.modal return_to={Routes.edge_index_path(@socket, :index)} class="modal fade" id="editEdgeModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLongTitle" aria-hidden="true">
    <.live_component
      module={EdgeOsCloudWeb.EdgeLive.FormComponent}
      id={@edge.id}
      title={@page_title}
      action={@live_action}
      edge={@edge}
      return_to={Routes.edge_index_path(@socket, :index)}
    />
  </.modal>
<% end %>

<%= if @live_action in [:connect] do %>
  <.modal return_to={Routes.edge_index_path(@socket, :index)} class="modal fade" id="editSSHModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLongTitle" aria-hidden="true">
    <.live_component
      module={EdgeOsCloudWeb.EdgeLive.ConnectComponent}
      id={@edge.id}
      title={@page_title}
      action={@live_action}
      current_user={@current_user}
      user_ip={@user_ip}
      edge={@edge}
      return_to={Routes.edge_index_path(@socket, :index)}
    />
  </.modal>
<% end %>

<!-- DataTales -->
<div class="card shadow mb-4">
    <div class="card-header py-3">
        <h6 class="m-0 font-weight-bold text-primary">Devices</h6>
    </div>
    <div class="card-body">
        <div class="table-responsive">
            <table class="table table-bordered" id="dataTable" width="100%" cellspacing="0">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Team</th>
                        <th>IPv4</th>
                        <th>Status</th>
                        <th>Status Since</th>
                        <th>Created Time</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tfoot>
                    <tr>
                        <th>Name</th>
                        <th>Team</th>
                        <th>IPv4</th>
                        <th>Status</th>
                        <th>Status Since</th>
                        <th>Created Time</th>
                        <th>Actions</th>
                    </tr>
                </tfoot>
                <tbody>
                    <%= for edge <- @edges do %>
                    <tr>
                        <td><%= edge.name %></td>
                        <td><%= edge.team.name %></td>
                        <td><%= edge.ip %></td>

                        <%= if EdgeOsCloud.Device.edge_online?(edge.id) do %>
                        <td class="bg-success text-white">Connected</td>
                        <% else %>
                        <td class="bg-gray-500 text-white">Disconnected</td>
                        <% end %>

                        <td><%= edge.updated_at %></td>
                        <td><%= edge.inserted_at %></td>
                        <td>
                            <%= live_patch to: Routes.edge_index_path(@socket, :edit, edge), class: "btn btn-warning btn-circle btn-sm", replace: false do %>
                                <i class="fas fa-edit"></i>
                            <% end %>
                            <%= link to: "#", phx_click: "info", phx_value_id: edge.id, data: [], class: "btn btn-info btn-circle btn-sm", replace: false do %>
                                <i class="fas fa-info-circle"></i>
                            <% end %>

                          <%= if EdgeOsCloud.Device.edge_online?(edge.id) do %>
                            <%= live_patch to: Routes.edge_index_path(@socket, :connect, edge), class: "btn btn-primary btn-circle btn-sm", replace: false do %>
                                <i class="fas fa-terminal"></i>
                            <% end %>

                            <%= link to: "#", phx_click: "delete", phx_value_id: edge.id, data: [confirm: "Edge is about to be deleted. Are you sure?"], class: "btn btn-danger btn-circle btn-sm", replace: false do %>
                                <i class="fas fa-trash"></i>
                            <% end %>
                          <% end %>
                        </td>
                    </tr>
                    <% end %>
                </tbody>
            </table>
        </div>
    </div>

  <script>
    function updatePort() {
        let portNumber = document.getElementById("connect-port-number").value;
        console.log('portNumber is set to be', portNumber);
        document.getElementById("button-connect").setAttribute("phx-value-port-number", portNumber);
    }

    window.addEventListener(`phx:step2`, (e) => {
      let s2_s1 = document.getElementById("ssh-step-1");
      if(s2_s1) s2_s1.hidden = "true";

      let s2_s2 = document.getElementById("ssh-step-2");
      if(s2_s2) {
        s2_s2.hidden = undefined;
        if (e.detail.note) document.getElementById("ssh-step-2-note").innerHTML = e.detail.note;
      }

      let s2_s3 = document.getElementById("ssh-step-3");
      if(s2_s3) s2_s3.hidden = "true";

      let s2_serror = document.getElementById("ssh-step-error");
      if(s2_serror) s2_serror.hidden = "true";
    });

    window.addEventListener(`phx:step3`, (e) => {
      let s3_s1 = document.getElementById("ssh-step-1");
      if(s3_s1) s3_s1.hidden = undefined;

      let s3_s2 = document.getElementById("ssh-step-2");
      if(s3_s2) s3_s2.hidden = "true";

      let s3_s3 = document.getElementById("ssh-step-3");
      if(s3_s3) {
        s3_s3.hidden = undefined;
        if (e.detail.title) document.getElementById("ssh-step-3-title").innerHTML = e.detail.title;
        if (e.detail.note) document.getElementById("ssh-step-3-note").innerHTML = e.detail.note;
        if (e.detail.finishnote) document.getElementById("ssh-step-3-finishnote").innerHTML = e.detail.finishnote;

        if (e.detail.command) {
            document.getElementById("ssh-step-3-connected").hidden = undefined;
            document.getElementById("ssh-step-3-disconnected").hidden = "true";
            document.getElementById("ssh-step-3-command").innerHTML = e.detail.command;
        }

        if (e.detail.disconnected) {
            document.getElementById("ssh-step-3-connected").hidden = "true";
            document.getElementById("ssh-step-3-disconnected").hidden = undefined;
        }
      }

      let s3_serror = document.getElementById("ssh-step-error");
      if(s3_serror) s3_serror.hidden = "true";
    });

    window.addEventListener(`phx:ssh_error`, (e) => {
      let serror_s1 = document.getElementById("ssh-step-1");
      if(serror_s1) serror_s1.hidden = undefined;

      let serror_s2 = document.getElementById("ssh-step-2");
      if(serror_s2) serror_s2.hidden = "true";

      let serror_s3 = document.getElementById("ssh-step-3");
      if(serror_s3) serror_s3.hidden = "true";

      let serror_serror = document.getElementById("ssh-step-error");
      if(serror_serror) {
        serror_serror.hidden = undefined;
        if (e.detail.title) document.getElementById("ssh-step-error-title").innerHTML = e.detail.title;
        if (e.detail.note) document.getElementById("ssh-step-error-note").innerHTML = e.detail.note;
      }
    });
  </script>
</div>
